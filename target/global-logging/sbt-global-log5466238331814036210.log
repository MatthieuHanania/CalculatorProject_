[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Matthieu\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Matthieu\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Microsoft Java 11.0.14.1)
[debug]       Load.loadUnit: plugins took 115.3815ms
[debug]       Load.loadUnit: defsScala took 0.3841ms
[debug] [Loading] Scanning directory C:\Users\Matthieu\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Matthieu\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.5689 ms
[debug]           Load.resolveProject(global-plugins) took 56.7074ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Matthieu\.sbt\1.0\plugins, plugins: List(<none>))) took 105.465ms
[debug] [Loading] Done in C:\Users\Matthieu\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 131.221ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2921ms
[debug]     Load.loadUnit(file:/C:/Users/Matthieu/.sbt/1.0/plugins/, ...) took 258.2465ms
[debug]   Load.apply: load took 450.064ms
[debug]   Load.apply: resolveProjects took 6.8026ms
[debug]   Load.apply: finalTransforms took 70.1307ms
[debug]   Load.apply: config.delegates took 10.0682ms
[debug]   Load.apply: Def.make(settings)... took 647.4758ms
[debug]   Load.apply: structureIndex took 118.7346ms
[debug]   Load.apply: mkStreams took 2.1446ms
[info] loading global plugins from C:\Users\Matthieu\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3186.1048ms
[debug]           Load.loadUnit: plugins took 26.8809ms
[debug]           Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory D:\EFREI\M1\scala\CalculatorProject_\project
[debug]             Load.loadUnit: mkEval took 9.8356ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\EFREI\M1\scala\CalculatorProject_\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8839 ms
[info] loading settings for project calculatorproject_-build from idea.sbt ...
[debug]               Load.resolveProject(calculatorproject_-build) took 13.3193ms
[debug]             Load.loadTransitive: finalizeProject(Project(id calculatorproject_-build, base: D:\EFREI\M1\scala\CalculatorProject_\project, plugins: List(<none>))) took 15.9153ms
[debug] [Loading] Done in D:\EFREI\M1\scala\CalculatorProject_\project, returning: (calculatorproject_-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2422.2286ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.3762ms
[debug]         Load.loadUnit(file:/D:/EFREI/M1/scala/CalculatorProject_/project/, ...) took 2455.3904ms
[debug]       Load.apply: load took 2456.8127ms
[debug]       Load.apply: resolveProjects took 0.1074ms
[debug]       Load.apply: finalTransforms took 11.4367ms
[debug]       Load.apply: config.delegates took 0.5194ms
[debug]       Load.apply: Def.make(settings)... took 105.2663ms
[debug]       Load.apply: structureIndex took 32.5608ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from D:\EFREI\M1\scala\CalculatorProject_\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4384.5392ms
[debug]     Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory D:\EFREI\M1\scala\CalculatorProject_
[debug]       Load.loadUnit: mkEval took 0.2419ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\EFREI\M1\scala\CalculatorProject_, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.4532 ms
[info] loading settings for project calculatorproject_ from build.sbt ...
[debug]         Load.resolveProject(calculatorproject_) took 33.8096ms
[debug]       Load.loadTransitive: finalizeProject(Project(id calculatorproject_, base: D:\EFREI\M1\scala\CalculatorProject_, plugins: List(<none>))) took 37.7377ms
[debug] [Loading] Done in D:\EFREI\M1\scala\CalculatorProject_, returning: (calculatorproject_)
[debug]     Load.loadUnit: loadedProjectsRaw took 895.575ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.3055ms
[debug]   Load.loadUnit(file:/D:/EFREI/M1/scala/CalculatorProject_/, ...) took 5292.082ms
[debug] Load.apply: load took 5293.5848ms
[debug] Load.apply: resolveProjects took 0.1123ms
[debug] Load.apply: finalTransforms took 51.7111ms
[debug] Load.apply: config.delegates took 0.5218ms
[debug] Load.apply: Def.make(settings)... took 84.5301ms
[debug] Load.apply: structureIndex took 23.3796ms
[debug] Load.apply: mkStreams took 0.005ms
[info] set current project to CalculatorProject_ (in build file:/D:/EFREI/M1/scala/CalculatorProject_/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 61186 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 61186, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to CalculatorProject_ (in build file:/D:/EFREI/M1/scala/CalculatorProject_/)
[debug] > Exec(idea-shell, None, None)
