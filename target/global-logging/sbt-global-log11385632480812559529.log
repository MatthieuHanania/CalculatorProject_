[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Matthieu\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Matthieu\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Microsoft Java 11.0.14.1)
[debug]       Load.loadUnit: plugins took 110.4915ms
[debug]       Load.loadUnit: defsScala took 0.3855ms
[debug] [Loading] Scanning directory C:\Users\Matthieu\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Matthieu\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.6225 ms
[debug]           Load.resolveProject(global-plugins) took 55.2111ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Matthieu\.sbt\1.0\plugins, plugins: List(<none>))) took 109.3195ms
[debug] [Loading] Done in C:\Users\Matthieu\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 136.5611ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2716ms
[debug]     Load.loadUnit(file:/C:/Users/Matthieu/.sbt/1.0/plugins/, ...) took 258.3296ms
[debug]   Load.apply: load took 450.4228ms
[debug]   Load.apply: resolveProjects took 10.581ms
[debug]   Load.apply: finalTransforms took 64.679ms
[debug]   Load.apply: config.delegates took 9.9043ms
[debug]   Load.apply: Def.make(settings)... took 603.7558ms
[debug]   Load.apply: structureIndex took 111.4901ms
[debug]   Load.apply: mkStreams took 2.7668ms
[info] loading global plugins from C:\Users\Matthieu\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3105.171ms
[debug]           Load.loadUnit: plugins took 41.0123ms
[debug]           Load.loadUnit: defsScala took 0.0056ms
[debug] [Loading] Scanning directory D:\EFREI\M1\scala\CalculatorProject_\project
[debug]             Load.loadUnit: mkEval took 8.9902ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\EFREI\M1\scala\CalculatorProject_\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6825 ms
[info] loading settings for project calculatorproject_-build from idea.sbt ...
[debug]               Load.resolveProject(calculatorproject_-build) took 2.8789ms
[debug]             Load.loadTransitive: finalizeProject(Project(id calculatorproject_-build, base: D:\EFREI\M1\scala\CalculatorProject_\project, plugins: List(<none>))) took 5.0768ms
[debug] [Loading] Done in D:\EFREI\M1\scala\CalculatorProject_\project, returning: (calculatorproject_-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 186.5074ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.2311ms
[debug]         Load.loadUnit(file:/D:/EFREI/M1/scala/CalculatorProject_/project/, ...) took 232.7795ms
[debug]       Load.apply: load took 234.1035ms
[debug]       Load.apply: resolveProjects took 0.177ms
[debug]       Load.apply: finalTransforms took 8.404ms
[debug]       Load.apply: config.delegates took 0.384ms
[debug]       Load.apply: Def.make(settings)... took 100.3041ms
[debug]       Load.apply: structureIndex took 31.2315ms
[debug]       Load.apply: mkStreams took 0.0039ms
[info] loading project definition from D:\EFREI\M1\scala\CalculatorProject_\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2112.2017ms
[debug]     Load.loadUnit: defsScala took 0.0033ms
[debug] [Loading] Scanning directory D:\EFREI\M1\scala\CalculatorProject_
[debug]       Load.loadUnit: mkEval took 0.1904ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\EFREI\M1\scala\CalculatorProject_, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.1232 ms
[info] loading settings for project calculatorproject_ from build.sbt ...
[debug]         Load.resolveProject(calculatorproject_) took 57.1491ms
[debug]       Load.loadTransitive: finalizeProject(Project(id calculatorproject_, base: D:\EFREI\M1\scala\CalculatorProject_, plugins: List(<none>))) took 60.4423ms
[debug] [Loading] Done in D:\EFREI\M1\scala\CalculatorProject_, returning: (calculatorproject_)
[debug]     Load.loadUnit: loadedProjectsRaw took 2817.8489ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.5695ms
[debug]   Load.loadUnit(file:/D:/EFREI/M1/scala/CalculatorProject_/, ...) took 4940.3605ms
[debug] Load.apply: load took 4941.7107ms
[debug] Load.apply: resolveProjects took 0.0958ms
[debug] Load.apply: finalTransforms took 28.6157ms
[debug] Load.apply: config.delegates took 0.2756ms
[debug] Load.apply: Def.make(settings)... took 80.3558ms
[debug] Load.apply: structureIndex took 21.1706ms
[debug] Load.apply: mkStreams took 0.3ms
[info] set current project to CalculatorProject_ (in build file:/D:/EFREI/M1/scala/CalculatorProject_/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 61426 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 61426, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to CalculatorProject_ (in build file:/D:/EFREI/M1/scala/CalculatorProject_/)
[debug] > Exec(idea-shell, None, None)
